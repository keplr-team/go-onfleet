// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	onfleet "github.com/keplr-team/go-onfleet/onfleet"
	mock "github.com/stretchr/testify/mock"
)

// TasksServiceInterface is an autogenerated mock type for the TasksServiceInterface type
type TasksServiceInterface struct {
	mock.Mock
}

// Complete provides a mock function with given fields: ctx, taskId, payload
func (_m *TasksServiceInterface) Complete(ctx context.Context, taskId string, payload *onfleet.TaskCompletePayload) (*onfleet.Task, error) {
	ret := _m.Called(ctx, taskId, payload)

	var r0 *onfleet.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, *onfleet.TaskCompletePayload) *onfleet.Task); ok {
		r0 = rf(ctx, taskId, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onfleet.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *onfleet.TaskCompletePayload) error); ok {
		r1 = rf(ctx, taskId, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, payload
func (_m *TasksServiceInterface) Create(ctx context.Context, payload *onfleet.TasksCreatePayload) ([]onfleet.Task, error) {
	ret := _m.Called(ctx, payload)

	var r0 []onfleet.Task
	if rf, ok := ret.Get(0).(func(context.Context, *onfleet.TasksCreatePayload) []onfleet.Task); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]onfleet.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onfleet.TasksCreatePayload) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, taskId
func (_m *TasksServiceInterface) Delete(ctx context.Context, taskId string) (*onfleet.Task, error) {
	ret := _m.Called(ctx, taskId)

	var r0 *onfleet.Task
	if rf, ok := ret.Get(0).(func(context.Context, string) *onfleet.Task); ok {
		r0 = rf(ctx, taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onfleet.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, taskId
func (_m *TasksServiceInterface) Get(ctx context.Context, taskId string) (*onfleet.Task, error) {
	ret := _m.Called(ctx, taskId)

	var r0 *onfleet.Task
	if rf, ok := ret.Get(0).(func(context.Context, string) *onfleet.Task); ok {
		r0 = rf(ctx, taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onfleet.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opts
func (_m *TasksServiceInterface) List(ctx context.Context, opts *onfleet.TasksListOptions) ([]onfleet.Task, error) {
	ret := _m.Called(ctx, opts)

	var r0 []onfleet.Task
	if rf, ok := ret.Get(0).(func(context.Context, *onfleet.TasksListOptions) []onfleet.Task); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]onfleet.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onfleet.TasksListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, taskId, payload
func (_m *TasksServiceInterface) Update(ctx context.Context, taskId string, payload *onfleet.TaskUpdatePayload) (*onfleet.Task, error) {
	ret := _m.Called(ctx, taskId, payload)

	var r0 *onfleet.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, *onfleet.TaskUpdatePayload) *onfleet.Task); ok {
		r0 = rf(ctx, taskId, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onfleet.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *onfleet.TaskUpdatePayload) error); ok {
		r1 = rf(ctx, taskId, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getMany provides a mock function with given fields: ctx, path, opts, v
func (_m *TasksServiceInterface) getMany(ctx context.Context, path string, opts interface{}, v interface{}) error {
	ret := _m.Called(ctx, path, opts, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, path, opts, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTasksServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTasksServiceInterface creates a new instance of TasksServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTasksServiceInterface(t mockConstructorTestingTNewTasksServiceInterface) *TasksServiceInterface {
	mock := &TasksServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
