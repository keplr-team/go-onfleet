// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	onfleet "github.com/keplr-team/go-onfleet/onfleet"
	mock "github.com/stretchr/testify/mock"
)

// WorkersServiceInterface is an autogenerated mock type for the WorkersServiceInterface type
type WorkersServiceInterface struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, workerId
func (_m *WorkersServiceInterface) Get(ctx context.Context, workerId string) (*onfleet.Worker, error) {
	ret := _m.Called(ctx, workerId)

	var r0 *onfleet.Worker
	if rf, ok := ret.Get(0).(func(context.Context, string) *onfleet.Worker); ok {
		r0 = rf(ctx, workerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onfleet.Worker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opts
func (_m *WorkersServiceInterface) List(ctx context.Context, opts *onfleet.WorkersListOptions) ([]onfleet.Worker, error) {
	ret := _m.Called(ctx, opts)

	var r0 []onfleet.Worker
	if rf, ok := ret.Get(0).(func(context.Context, *onfleet.WorkersListOptions) []onfleet.Worker); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]onfleet.Worker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onfleet.WorkersListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Location provides a mock function with given fields: ctx, opts
func (_m *WorkersServiceInterface) Location(ctx context.Context, opts *onfleet.WorkersLocationOptions) ([]onfleet.Worker, error) {
	ret := _m.Called(ctx, opts)

	var r0 []onfleet.Worker
	if rf, ok := ret.Get(0).(func(context.Context, *onfleet.WorkersLocationOptions) []onfleet.Worker); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]onfleet.Worker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *onfleet.WorkersLocationOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWorkersServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewWorkersServiceInterface creates a new instance of WorkersServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWorkersServiceInterface(t mockConstructorTestingTNewWorkersServiceInterface) *WorkersServiceInterface {
	mock := &WorkersServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
